import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:nicotinaai_flutter/blocs/auth/auth_bloc.dart';
import 'package:nicotinaai_flutter/blocs/onboarding/onboarding_bloc.dart';
import 'package:nicotinaai_flutter/core/routes/router_refresh_stream.dart';
import 'package:nicotinaai_flutter/features/auth/screens/forgot_password_screen.dart';
import 'package:nicotinaai_flutter/features/auth/screens/login_screen.dart';
import 'package:nicotinaai_flutter/features/auth/screens/register_screen.dart';
import 'package:nicotinaai_flutter/features/auth/screens/splash_screen.dart';
import 'package:nicotinaai_flutter/features/main/screens/main_screen.dart';
import 'package:nicotinaai_flutter/features/home/screens/home_screen.dart';
import 'package:nicotinaai_flutter/features/achievements/screens/updated_achievements_screen.dart' as updated;
import 'package:nicotinaai_flutter/features/achievements/screens/achievement_detail_screen.dart';
import 'package:nicotinaai_flutter/features/settings/screens/settings_screen.dart';
import 'package:nicotinaai_flutter/features/settings/screens/language_selection_screen.dart';
import 'package:nicotinaai_flutter/features/settings/screens/language_selection_screen_bloc.dart';
import 'package:nicotinaai_flutter/features/settings/screens/currency_selection_screen.dart';
import 'package:nicotinaai_flutter/features/settings/screens/currency_selection_screen_bloc.dart';
import 'package:nicotinaai_flutter/features/settings/screens/theme_selection_screen_bloc.dart';
import 'package:nicotinaai_flutter/features/onboarding/screens/onboarding_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/screens/dashboard_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/screens/statistics_dashboard_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/screens/add_smoking_log_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/screens/add_craving_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/screens/health_recovery_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/screens/health_recovery_detail_screen.dart';
import 'package:nicotinaai_flutter/features/tracking/widgets/health_recovery_test.dart';
import 'package:nicotinaai_flutter/core/routes/app_routes.dart';

/// Router para configura√ß√£o de rotas da aplica√ß√£o com prote√ß√£o de autentica√ß√£o
class AppRouter {
  final AuthBloc authBloc;
  final OnboardingBloc onboardingBloc;
  
  AppRouter({
    required this.authBloc,
    required this.onboardingBloc,
  });
  
  late final GoRouter router = GoRouter(
    debugLogDiagnostics: true,
    refreshListenable: RouterRefreshStream(authBloc),
    initialLocation: SplashScreen.routeName,
    redirect: _handleRedirect,
    routes: [
      // Rota de splash screen
      GoRoute(
        path: SplashScreen.routeName,
        builder: (context, state) => const SplashScreen(),
      ),
      
      // Rotas de autentica√ß√£o
      GoRoute(
        path: LoginScreen.routeName,
        builder: (context, state) => const LoginScreen(),
      ),
      GoRoute(
        path: RegisterScreen.routeName,
        builder: (context, state) => const RegisterScreen(),
      ),
      GoRoute(
        path: ForgotPasswordScreen.routeName,
        builder: (context, state) => const ForgotPasswordScreen(),
      ),
      
      // Rota de onboarding
      GoRoute(
        path: OnboardingScreen.routeName,
        builder: (context, state) => const OnboardingScreen(),
      ),
      
      // Rota principal com tabs
      GoRoute(
        path: MainScreen.routeName,
        builder: (context, state) => const MainScreen(),
      ),
      
      // Rotas individuais para as tabs (para navega√ß√£o direta)
      GoRoute(
        path: HomeScreen.routeName,
        builder: (context, state) => const HomeScreen(),
      ),
      GoRoute(
        path: updated.AchievementsScreen.routeName,
        builder: (context, state) => const updated.AchievementsScreen(),
      ),
      GoRoute(
        path: SettingsScreen.routeName,
        builder: (context, state) => const SettingsScreen(),
      ),
      GoRoute(
        path: LanguageSelectionScreen.routeName,
        builder: (context, state) => const LanguageSelectionScreen(),
      ),
      
      // Rotas de tracking e estat√≠sticas
      GoRoute(
        path: AppRoutes.statisticsDashboard.path,
        builder: (context, state) => const StatisticsDashboardScreen(),
      ),
      GoRoute(
        path: AppRoutes.addSmokingLog.path,
        builder: (context, state) => const AddSmokingLogScreen(),
      ),
      GoRoute(
        path: AppRoutes.addCraving.path,
        builder: (context, state) => const AddCravingScreen(),
      ),
      GoRoute(
        path: AppRoutes.currency.path,
        builder: (context, state) => const CurrencySelectionScreen(),
      ),
      
      // BLoC screens routes
      GoRoute(
        path: AppRoutes.currencyBloc.path,
        builder: (context, state) => const CurrencySelectionScreenBloc(),
      ),
      GoRoute(
        path: AppRoutes.themeBloc.path,
        builder: (context, state) => const ThemeSelectionScreenBloc(),
      ),
      GoRoute(
        path: AppRoutes.languageBloc.path,
        builder: (context, state) => const LanguageSelectionScreenBloc(),
      ),
      
      // Health recovery routes
      GoRoute(
        path: AppRoutes.healthRecovery.path,
        builder: (context, state) => const HealthRecoveryScreen(),
      ),
      GoRoute(
        path: AppRoutes.healthRecoveryDetail.path,
        builder: (context, state) {
          final recoveryId = state.pathParameters['recoveryId'] ?? '';
          return HealthRecoveryDetailScreen(recoveryId: recoveryId);
        },
      ),
      GoRoute(
        path: AppRoutes.healthRecoveryTest.path,
        builder: (context, state) => const HealthRecoveryTest(),
      ),
      
      // Achievement routes
      GoRoute(
        path: AppRoutes.achievementDetail.path,
        builder: (context, state) {
          final achievementId = state.pathParameters['achievementId'] ?? '';
          return AchievementDetailScreen(achievementId: achievementId);
        },
      ),
      
    ],
    errorBuilder: (context, state) => Scaffold(
      body: Center(
        child: Text('Erro: P√°gina n√£o encontrada'),
      ),
    ),
  );

  // Flag para evitar loops infinitos
  bool _hasCompletedInitialNavigation = false;
  bool _redirectLoopDetected = false;
  int _redirectCount = 0;
  DateTime? _lastRedirectTime;
  
  /// Gerencia os redirecionamentos com base no estado de autentica√ß√£o e onboarding
  /// Vers√£o ultra-simplificada para evitar problemas
  String? _handleRedirect(BuildContext context, GoRouterState state) {
    // P√°gina atual
    final currentLocation = state.uri.path;
    
    // REGRA CR√çTICA: JAMAIS interferir na navega√ß√£o da SplashScreen
    // A SplashScreen √© respons√°vel por direcionar o usu√°rio para o local correto
    if (currentLocation == SplashScreen.routeName) {
      print('üõë [AppRouter] Na tela de splash, NUNCA interferir');
      return null;
    }
    
    final isAuthenticated = authBloc.state.isAuthenticated;
    final onboardingCompleted = onboardingBloc.state.isCompleted;
    
    // Log detalhado para diagnosticar problemas de redirecionamento
    print('üß≠ [AppRouter] Navega√ß√£o para: $currentLocation - Auth: $isAuthenticated, Onboarding completo: $onboardingCompleted');
    
    // REGRA 1: NUNCA interferir em navega√ß√µes para MainScreen
    // Se o usu√°rio est√° indo para MainScreen, devemos sempre permitir
    if (currentLocation == MainScreen.routeName) {
      print('‚úÖ [AppRouter] Indo para MainScreen, permitindo navega√ß√£o');
      _hasCompletedInitialNavigation = true; // Marca que j√° concluiu a navega√ß√£o inicial
      return null;
    }
    
    // REGRA 2: Permitir navega√ß√£o irrestrita ap√≥s primeira navega√ß√£o bem-sucedida
    // Isso evita que o sistema fique preso em loops infinitos de redirecionamento
    if (_hasCompletedInitialNavigation) {
      print('‚úÖ [AppRouter] Navega√ß√£o inicial j√° conclu√≠da, permitindo todas as navega√ß√µes');
      return null;
    }
    
    // REGRA 3: Proteger rotas autenticadas se o usu√°rio n√£o estiver logado
    if (!isAuthenticated) {
      // Se n√£o est√° autenticado, permitir acesso apenas √†s rotas de autentica√ß√£o
      final isAuthRoute = currentLocation == LoginScreen.routeName || 
                          currentLocation == RegisterScreen.routeName || 
                          currentLocation == ForgotPasswordScreen.routeName;
                          
      if (!isAuthRoute) {
        print('üîí [AppRouter] Usu√°rio n√£o autenticado, redirecionando para login');
        return LoginScreen.routeName;
      }
      
      return null;
    }
    
    // REGRA 4: Proteger contra acesso a telas de autentica√ß√£o quando j√° autenticado
    final isAuthRoute = currentLocation == LoginScreen.routeName || 
                        currentLocation == RegisterScreen.routeName || 
                        currentLocation == ForgotPasswordScreen.routeName;
                        
    if (isAuthenticated && isAuthRoute) {
      print('üîÑ [AppRouter] Usu√°rio j√° autenticado tentando acessar tela de autentica√ß√£o');
      
      // Se o onboarding est√° completo, ir para tela principal
      if (onboardingCompleted) {
        print('‚úÖ [AppRouter] Onboarding completo, redirecionando para MainScreen');
        _hasCompletedInitialNavigation = true;
        return MainScreen.routeName;
      }
      
      // Se onboarding n√£o est√° completo, ir para onboarding
      print('‚è© [AppRouter] Onboarding incompleto, redirecionando para OnboardingScreen');
      return OnboardingScreen.routeName;
    }
    
    // Para todas as outras rotas, permitir navega√ß√£o normal
    return null;
  }
}