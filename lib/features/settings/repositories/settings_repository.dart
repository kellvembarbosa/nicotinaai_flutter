import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:nicotinaai_flutter/config/supabase_config.dart';
import 'package:nicotinaai_flutter/core/exceptions/auth_exception.dart' as app_exceptions;
import 'package:nicotinaai_flutter/features/auth/models/user_model.dart';
import 'package:nicotinaai_flutter/features/settings/models/user_settings_model.dart';

/// Reposit√≥rio para gerenciar configura√ß√µes do usu√°rio
class SettingsRepository {
  final SupabaseClient _supabaseClient = SupabaseConfig.client;
  
  /// Nome das tabelas no Supabase
  static const String _userStatsTable = 'user_stats';
  static const String _profilesTable = 'profiles';
  
  /// Obt√©m as configura√ß√µes do usu√°rio atual
  Future<UserSettingsModel> getUserSettings() async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Busca as estat√≠sticas do usu√°rio
      final userStatsResponse = await _supabaseClient
        .from(_userStatsTable)
        .select()
        .eq('user_id', user.id)
        .maybeSingle();
      
      // Busca o perfil do usu√°rio
      final profileResponse = await _supabaseClient
        .from(_profilesTable)
        .select()
        .eq('id', user.id)
        .maybeSingle();
      
      // Combina os dados das duas tabelas
      final Map<String, dynamic> settingsData = {};
      
      if (userStatsResponse != null) {
        settingsData['cigarettes_per_day'] = userStatsResponse['cigarettes_per_day'] ?? 20;
        settingsData['cigarettes_per_pack'] = userStatsResponse['cigarettes_per_pack'] ?? 20;
        settingsData['pack_price'] = userStatsResponse['pack_price'] ?? 1000; // em centavos
        settingsData['last_smoke_date'] = userStatsResponse['last_smoke_date'];
      }
      
      if (profileResponse != null) {
        settingsData['currency_code'] = profileResponse['currency_code'] ?? 'BRL';
        settingsData['currency_symbol'] = profileResponse['currency_symbol'] ?? r'R$';
      }
      
      // Se n√£o houver dados, retorna configura√ß√µes padr√£o
      if (settingsData.isEmpty) {
        return const UserSettingsModel();
      }
      
      return UserSettingsModel.fromJson(settingsData);
    } catch (e) {
      // Em caso de erro, retorna configura√ß√µes padr√£o
      print('‚ö†Ô∏è [SettingsRepository] Erro ao obter configura√ß√µes: $e');
      return const UserSettingsModel();
    }
  }
  
  /// Salva as configura√ß√µes do usu√°rio
  Future<UserSettingsModel> saveUserSettings(UserSettingsModel settings) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Verifica se j√° existe um registro de estat√≠sticas para o usu√°rio
      final existingStats = await _supabaseClient
        .from(_userStatsTable)
        .select('id')
        .eq('user_id', user.id)
        .maybeSingle();
      
      // Prepara os dados para a tabela user_stats
      final Map<String, dynamic> userStatsData = {
        'cigarettes_per_day': settings.cigarettesPerDay,
        'cigarettes_per_pack': settings.cigarettesPerPack,
        'pack_price': settings.packPriceInCents,
        'updated_at': DateTime.now().toIso8601String(),
      };
      
      // Adiciona a data do √∫ltimo cigarro, se dispon√≠vel
      if (settings.quitDate != null) {
        userStatsData['last_smoke_date'] = settings.quitDate?.toIso8601String();
      }
      
      // Prepara os dados para a tabela profiles
      final Map<String, dynamic> profilesData = {
        'currency_code': settings.currencyCode,
        'currency_symbol': settings.currencySymbol,
        'updated_at': DateTime.now().toIso8601String(),
      };
      
      // Salva os dados na tabela user_stats
      if (existingStats == null) {
        // Se n√£o existir, insere um novo registro
        userStatsData['user_id'] = user.id;
        userStatsData['created_at'] = DateTime.now().toIso8601String();
        
        await _supabaseClient
          .from(_userStatsTable)
          .insert(userStatsData);
      } else {
        // Se existir, atualiza o registro
        await _supabaseClient
          .from(_userStatsTable)
          .update(userStatsData)
          .eq('user_id', user.id);
      }
      
      // Atualiza a tabela profiles
      await _supabaseClient
        .from(_profilesTable)
        .update(profilesData)
        .eq('id', user.id);
      
      return settings;
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao salvar configura√ß√µes: $e');
      throw Exception('Falha ao salvar configura√ß√µes: $e');
    }
  }
  
  /// Atualiza o pre√ßo do ma√ßo de cigarros
  Future<UserSettingsModel> updatePackPrice(int priceInCents) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Atualiza diretamente na tabela user_stats
      await _supabaseClient
        .from(_userStatsTable)
        .update({
          'pack_price': priceInCents,
          'updated_at': DateTime.now().toIso8601String(),
        })
        .eq('user_id', user.id);
      
      // Retorna as configura√ß√µes atualizadas
      return await getUserSettings();
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar pre√ßo do ma√ßo: $e');
      throw Exception('Falha ao atualizar pre√ßo do ma√ßo: $e');
    }
  }
  
  /// Atualiza a quantidade de cigarros por dia
  Future<UserSettingsModel> updateCigarettesPerDay(int cigarettesPerDay) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Atualiza diretamente na tabela user_stats
      await _supabaseClient
        .from(_userStatsTable)
        .update({
          'cigarettes_per_day': cigarettesPerDay,
          'updated_at': DateTime.now().toIso8601String(),
        })
        .eq('user_id', user.id);
      
      // Retorna as configura√ß√µes atualizadas
      return await getUserSettings();
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar cigarros por dia: $e');
      throw Exception('Falha ao atualizar cigarros por dia: $e');
    }
  }
  
  /// Atualiza a data em que o usu√°rio parou de fumar
  Future<UserSettingsModel> updateQuitDate(DateTime? quitDate) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Atualiza diretamente na tabela user_stats
      await _supabaseClient
        .from(_userStatsTable)
        .update({
          'last_smoke_date': quitDate?.toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
        })
        .eq('user_id', user.id);
      
      // Retorna as configura√ß√µes atualizadas
      return await getUserSettings();
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar data de parada: $e');
      throw Exception('Falha ao atualizar data de parada: $e');
    }
  }
  
  /// Solicita redefini√ß√£o de senha
  Future<void> requestPasswordReset(String email) async {
    try {
      await _supabaseClient.auth.resetPasswordForEmail(email);
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao solicitar redefini√ß√£o de senha: $e');
      throw Exception('Falha ao solicitar redefini√ß√£o de senha: $e');
    }
  }
  
  /// Altera a senha do usu√°rio atual
  Future<void> changePassword(String currentPassword, String newPassword) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      final email = user.email;
      
      if (email == null) {
        throw app_exceptions.AuthException('Email do usu√°rio n√£o dispon√≠vel');
      }
      
      // Verifica a senha atual tentando fazer login
      await _supabaseClient.auth.signInWithPassword(
        email: email,
        password: currentPassword,
      );
      
      // Se chegar aqui, a senha atual est√° correta
      await _supabaseClient.auth.updateUser(
        UserAttributes(password: newPassword),
      );
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao alterar senha: $e');
      
      if (e is AuthException) {
        throw e;
      }
      
      throw Exception('Falha ao alterar senha: $e');
    }
  }
  
  /// Exclui a conta do usu√°rio diretamente no app
  Future<void> deleteAccount(String password) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      final email = user.email;
      
      if (email == null) {
        throw app_exceptions.AuthException('Email do usu√°rio n√£o dispon√≠vel');
      }
      
      // Verifica a senha atual tentando fazer login
      try {
        await _supabaseClient.auth.signInWithPassword(
          email: email,
          password: password,
        );
      } catch (signInError) {
        throw app_exceptions.AuthException('Senha incorreta. Verifique sua senha e tente novamente.');
      }
      
      print('‚úÖ [SettingsRepository] Senha verificada, prosseguindo com exclus√£o de conta');
      
      // Realizar a exclus√£o de dados
      try {
        // Exclui os dados do usu√°rio das tabelas principais
        print('üóëÔ∏è [SettingsRepository] Excluindo dados do usu√°rio das tabelas...');
        
        // Lista de tabelas a serem limpas - exclu√≠mos com try/catch para cada uma
        // para garantir que uma tabela inexistente n√£o interrompa o processo
        
        try {
          await _supabaseClient.from(_userStatsTable).delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de user_stats');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de user_stats: $e');
        }
        
        try {
          await _supabaseClient.from('cravings').delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de cravings');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de cravings: $e');
        }
        
        try {
          await _supabaseClient.from('smoking_logs').delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de smoking_logs');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de smoking_logs: $e');
        }
        
        try {
          await _supabaseClient.from('user_notifications').delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de user_notifications');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de user_notifications: $e');
        }
        
        try {
          await _supabaseClient.from('user_achievements').delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de user_achievements');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de user_achievements: $e');
        }
        
        try {
          await _supabaseClient.from('user_health_recoveries').delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de user_health_recoveries');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de user_health_recoveries: $e');
        }
        
        try {
          await _supabaseClient.from('user_fcm_tokens').delete().eq('user_id', user.id);
          print('‚úì Exclu√≠do dados de user_fcm_tokens');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de user_fcm_tokens: $e');
        }
        
        try {
          await _supabaseClient.from(_profilesTable).delete().eq('id', user.id);
          print('‚úì Exclu√≠do dados de profiles');
        } catch (e) {
          print('‚ö†Ô∏è Erro ao excluir de profiles: $e');
        }
        
        // Hard delete: chama a Edge Function para excluir o usu√°rio totalmente
        print('üóëÔ∏è [SettingsRepository] Executando hard delete via Edge Function...');
        
        try {
          // Agora enviamos diretamente o user_id e password para a Edge Function
          // Sem depender do token JWT
          print('üì§ [SettingsRepository] Enviando requisi√ß√£o para a Edge Function...');
          
          // Chamada da Edge Function para excluir a conta - simplificada
          final response = await _supabaseClient.functions.invoke(
            'delete-user-account',
            body: {
              'user_id': user.id
              // N√£o precisamos mais do password na Edge Function
            }
          );
          
          // Verifica se a resposta foi bem-sucedida
          if (response.status != 200) {
            // Se a resposta contiver uma mensagem de erro, use-a
            if (response.data != null && response.data['error'] != null) {
              print('‚ö†Ô∏è [SettingsRepository] Erro da Edge Function: ${response.data['error']}');
              throw app_exceptions.AuthException(
                'Erro ao excluir conta: ${response.data['error']} - ${response.data['details'] ?? ''}'
              );
            }
            
            // Caso contr√°rio, use o c√≥digo de status
            throw app_exceptions.AuthException('Erro ao excluir conta. C√≥digo: ${response.status}');
          }
          
          print('‚úÖ [SettingsRepository] Usu√°rio exclu√≠do com sucesso via Edge Function');
        } catch (edgeFunctionError) {
          print('‚ö†Ô∏è [SettingsRepository] Edge Function falhou: $edgeFunctionError');
          
          // J√° que a Edge Function falhou, usamos o plano B
          // A op√ß√£o mais pr√≥xima √© tornar a conta inutiliz√°vel
          print('üìù [SettingsRepository] Tornando a conta inutiliz√°vel...');
          
          // Apenas marque os metadados do usu√°rio como exclu√≠do
          // N√£o tente alterar o email ou senha, pois isso pode causar erros de valida√ß√£o
          print('üìù [SettingsRepository] Marcando metadados do usu√°rio como exclu√≠do...');
          
          try {
            await _supabaseClient.auth.updateUser(
              UserAttributes(
                data: {
                  'account_deleted': true, 
                  'deletion_timestamp': DateTime.now().toIso8601String(),
                  'deleted_by': 'user_request'
                }
              )
            );
            print('‚úÖ [SettingsRepository] Metadados do usu√°rio atualizados com sucesso');
          } catch (metadataError) {
            print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar metadados: $metadataError');
            // Continuamos mesmo se falhar a atualiza√ß√£o dos metadados
          }
          
          print('‚úÖ [SettingsRepository] Conta tornada inutiliz√°vel com sucesso');
        }
        
        // Procedimento de limpeza final
        print('üßπ [SettingsRepository] Realizando limpeza final...');
        
        // Se apenas quisermos desativar a conta sem impedir registro futuro
        // Apenas marcamos os metadados e ignoramos qualquer opera√ß√£o na senha
        final wasHardDeleted = response?.status == 200;
        
        if (!wasHardDeleted) {
          print('üîí [SettingsRepository] Hard delete n√£o foi bem-sucedido, desabilitando conta via metadados...');
          
          try {
            // Apenas atualizamos os metadados marcando a conta como exclu√≠da
            // Isso permitir√° que o usu√°rio use o mesmo email para se registrar no futuro
            await _supabaseClient.auth.updateUser(
              UserAttributes(
                data: {
                  'account_deleted': true,
                  'deletion_timestamp': DateTime.now().toIso8601String(),
                  'deletion_complete': true,
                  'deletion_method': 'soft_delete_with_metadata'
                }
              )
            );
            
            print('üìù [SettingsRepository] Metadados atualizados para marcar conta como exclu√≠da');
          } catch (metadataError) {
            print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar metadados: $metadataError');
          }
        }
        
        // Executa logout em todas as sess√µes para encerrar o acesso em todos os dispositivos
        print('üëã [SettingsRepository] Fazendo logout...');
        await _supabaseClient.auth.signOut();
        
        print('‚úÖ [SettingsRepository] Processo de exclus√£o de conta conclu√≠do com sucesso');
        
        // Garantir que o usu√°rio seja redirecionado para a tela de login
        // Observa√ß√£o: Este c√≥digo ser√° executado na camada de UI, atrav√©s do BLoC no DeleteAccountScreen
      } catch (error) {
        print('‚ö†Ô∏è [SettingsRepository] Erro ao excluir dados: $error');
        throw app_exceptions.AuthException('Falha ao excluir dados da conta: $error');
      }
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao excluir conta: $e');
      
      if (e is AuthException) {
        throw e;
      }
      
      throw app_exceptions.AuthException('Falha ao excluir conta: $e');
    }
  }
}