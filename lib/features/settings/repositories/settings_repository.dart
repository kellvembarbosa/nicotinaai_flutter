import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:nicotinaai_flutter/config/supabase_config.dart';
import 'package:nicotinaai_flutter/core/exceptions/auth_exception.dart' as app_exceptions;
import 'package:nicotinaai_flutter/features/auth/models/user_model.dart';
import 'package:nicotinaai_flutter/features/settings/models/user_settings_model.dart';

/// Reposit√≥rio para gerenciar configura√ß√µes do usu√°rio
class SettingsRepository {
  final SupabaseClient _supabaseClient = SupabaseConfig.client;
  
  /// Nome das tabelas no Supabase
  static const String _userStatsTable = 'user_stats';
  static const String _profilesTable = 'profiles';
  
  /// Obt√©m as configura√ß√µes do usu√°rio atual
  Future<UserSettingsModel> getUserSettings() async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Busca as estat√≠sticas do usu√°rio
      final userStatsResponse = await _supabaseClient
        .from(_userStatsTable)
        .select()
        .eq('user_id', user.id)
        .maybeSingle();
      
      // Busca o perfil do usu√°rio
      final profileResponse = await _supabaseClient
        .from(_profilesTable)
        .select()
        .eq('id', user.id)
        .maybeSingle();
      
      // Combina os dados das duas tabelas
      final Map<String, dynamic> settingsData = {};
      
      if (userStatsResponse != null) {
        settingsData['cigarettes_per_day'] = userStatsResponse['cigarettes_per_day'] ?? 20;
        settingsData['cigarettes_per_pack'] = userStatsResponse['cigarettes_per_pack'] ?? 20;
        settingsData['pack_price'] = userStatsResponse['pack_price'] ?? 1000; // em centavos
        settingsData['last_smoke_date'] = userStatsResponse['last_smoke_date'];
      }
      
      if (profileResponse != null) {
        settingsData['currency_code'] = profileResponse['currency_code'] ?? 'BRL';
        settingsData['currency_symbol'] = profileResponse['currency_symbol'] ?? r'R$';
      }
      
      // Se n√£o houver dados, retorna configura√ß√µes padr√£o
      if (settingsData.isEmpty) {
        return const UserSettingsModel();
      }
      
      return UserSettingsModel.fromJson(settingsData);
    } catch (e) {
      // Em caso de erro, retorna configura√ß√µes padr√£o
      print('‚ö†Ô∏è [SettingsRepository] Erro ao obter configura√ß√µes: $e');
      return const UserSettingsModel();
    }
  }
  
  /// Salva as configura√ß√µes do usu√°rio
  Future<UserSettingsModel> saveUserSettings(UserSettingsModel settings) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Verifica se j√° existe um registro de estat√≠sticas para o usu√°rio
      final existingStats = await _supabaseClient
        .from(_userStatsTable)
        .select('id')
        .eq('user_id', user.id)
        .maybeSingle();
      
      // Prepara os dados para a tabela user_stats
      final Map<String, dynamic> userStatsData = {
        'cigarettes_per_day': settings.cigarettesPerDay,
        'cigarettes_per_pack': settings.cigarettesPerPack,
        'pack_price': settings.packPriceInCents,
        'updated_at': DateTime.now().toIso8601String(),
      };
      
      // Adiciona a data do √∫ltimo cigarro, se dispon√≠vel
      if (settings.quitDate != null) {
        userStatsData['last_smoke_date'] = settings.quitDate?.toIso8601String();
      }
      
      // Prepara os dados para a tabela profiles
      final Map<String, dynamic> profilesData = {
        'currency_code': settings.currencyCode,
        'currency_symbol': settings.currencySymbol,
        'updated_at': DateTime.now().toIso8601String(),
      };
      
      // Salva os dados na tabela user_stats
      if (existingStats == null) {
        // Se n√£o existir, insere um novo registro
        userStatsData['user_id'] = user.id;
        userStatsData['created_at'] = DateTime.now().toIso8601String();
        
        await _supabaseClient
          .from(_userStatsTable)
          .insert(userStatsData);
      } else {
        // Se existir, atualiza o registro
        await _supabaseClient
          .from(_userStatsTable)
          .update(userStatsData)
          .eq('user_id', user.id);
      }
      
      // Atualiza a tabela profiles
      await _supabaseClient
        .from(_profilesTable)
        .update(profilesData)
        .eq('id', user.id);
      
      return settings;
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao salvar configura√ß√µes: $e');
      throw Exception('Falha ao salvar configura√ß√µes: $e');
    }
  }
  
  /// Atualiza o pre√ßo do ma√ßo de cigarros
  Future<UserSettingsModel> updatePackPrice(int priceInCents) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Atualiza diretamente na tabela user_stats
      await _supabaseClient
        .from(_userStatsTable)
        .update({
          'pack_price': priceInCents,
          'updated_at': DateTime.now().toIso8601String(),
        })
        .eq('user_id', user.id);
      
      // Retorna as configura√ß√µes atualizadas
      return await getUserSettings();
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar pre√ßo do ma√ßo: $e');
      throw Exception('Falha ao atualizar pre√ßo do ma√ßo: $e');
    }
  }
  
  /// Atualiza a quantidade de cigarros por dia
  Future<UserSettingsModel> updateCigarettesPerDay(int cigarettesPerDay) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Atualiza diretamente na tabela user_stats
      await _supabaseClient
        .from(_userStatsTable)
        .update({
          'cigarettes_per_day': cigarettesPerDay,
          'updated_at': DateTime.now().toIso8601String(),
        })
        .eq('user_id', user.id);
      
      // Retorna as configura√ß√µes atualizadas
      return await getUserSettings();
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar cigarros por dia: $e');
      throw Exception('Falha ao atualizar cigarros por dia: $e');
    }
  }
  
  /// Atualiza a data em que o usu√°rio parou de fumar
  Future<UserSettingsModel> updateQuitDate(DateTime? quitDate) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      // Atualiza diretamente na tabela user_stats
      await _supabaseClient
        .from(_userStatsTable)
        .update({
          'last_smoke_date': quitDate?.toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
        })
        .eq('user_id', user.id);
      
      // Retorna as configura√ß√µes atualizadas
      return await getUserSettings();
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao atualizar data de parada: $e');
      throw Exception('Falha ao atualizar data de parada: $e');
    }
  }
  
  /// Solicita redefini√ß√£o de senha
  Future<void> requestPasswordReset(String email) async {
    try {
      await _supabaseClient.auth.resetPasswordForEmail(email);
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao solicitar redefini√ß√£o de senha: $e');
      throw Exception('Falha ao solicitar redefini√ß√£o de senha: $e');
    }
  }
  
  /// Altera a senha do usu√°rio atual
  Future<void> changePassword(String currentPassword, String newPassword) async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      final email = user.email;
      
      if (email == null) {
        throw app_exceptions.AuthException('Email do usu√°rio n√£o dispon√≠vel');
      }
      
      // Verifica a senha atual tentando fazer login
      await _supabaseClient.auth.signInWithPassword(
        email: email,
        password: currentPassword,
      );
      
      // Se chegar aqui, a senha atual est√° correta
      await _supabaseClient.auth.updateUser(
        UserAttributes(password: newPassword),
      );
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao alterar senha: $e');
      
      if (e is AuthException) {
        throw e;
      }
      
      throw Exception('Falha ao alterar senha: $e');
    }
  }
  
  /// Exclui a conta do usu√°rio usando hard delete via Edge Function
  /// Usa a SERVICE_ROLE key no servidor para excluir completamente o usu√°rio
  /// 
  /// Esta implementa√ß√£o usa somente a fun√ß√£o Edge Function que:
  /// 1. Limpa todos os dados do usu√°rio via fun√ß√£o SQL cascade_delete_user
  /// 2. Tenta fazer hard delete do usu√°rio
  /// 3. Se falhar, tenta soft delete
  /// 4. Se ambos falharem, marca o usu√°rio como exclu√≠do nos metadados
  /// 
  /// Retorna true se a exclus√£o foi bem-sucedida para que o chamador possa
  /// despachar o evento AccountDeletedLogout no AuthBloc
  Future<bool> deleteAccount() async {
    try {
      final user = _supabaseClient.auth.currentUser;
      
      if (user == null) {
        throw app_exceptions.AuthException('Usu√°rio n√£o autenticado');
      }
      
      print('üóëÔ∏è [SettingsRepository] Iniciando exclus√£o de conta via Edge Function...');
      print('üîç [SettingsRepository] User ID: ${user.id}');
      
      try {
        // Log para depura√ß√£o
        print('üìù [SettingsRepository] Verificando dados da sess√£o atual...');
        
        // Obter token de autentica√ß√£o para a solicita√ß√£o
        final token = _supabaseClient.auth.currentSession?.accessToken;
        final refreshToken = _supabaseClient.auth.currentSession?.refreshToken;
        
        if (token == null) {
          print('‚ùå [SettingsRepository] Token de acesso n√£o encontrado na sess√£o atual');
          throw app_exceptions.AuthException('Sess√£o de usu√°rio inv√°lida, fa√ßa login novamente');
        }
        
        print('‚úÖ [SettingsRepository] Token de acesso obtido (${token.substring(0, 15)}...)');
        print('üìù [SettingsRepository] Refresh token dispon√≠vel: ${refreshToken != null}');
        
        // Chamar a Edge Function diretamente com o ID do usu√°rio
        print('üì° [SettingsRepository] Enviando requisi√ß√£o para delete-user-account Edge Function...');
        print('üìù [SettingsRepository] Body: { "user_id": "${user.id}" }');
        
        final stopwatch = Stopwatch()..start();
        
        final response = await _supabaseClient.functions.invoke(
          'delete-user-account',
          body: { 'user_id': user.id },
          headers: { 'Authorization': 'Bearer $token' }
        );
        
        stopwatch.stop();
        print('‚è±Ô∏è [SettingsRepository] Edge Function executada em ${stopwatch.elapsedMilliseconds}ms');
        print('üìä [SettingsRepository] Status da resposta: ${response.status}');
        
        // Verificar se a fun√ß√£o Edge Function foi bem-sucedida
        if (response.status != 200) {
          if (response.data != null && response.data['error'] != null) {
            final errorMessage = response.data['error'].toString().toLowerCase();
            print('‚ö†Ô∏è [SettingsRepository] Erro da Edge Function: ${response.data['error']}');
            
            // Verificar se o erro √© relacionado a usu√°rio n√£o encontrado
            if (errorMessage.contains('user_not_found') || 
                errorMessage.contains('user not found')) {
              print('‚ÑπÔ∏è [SettingsRepository] Usu√°rio n√£o encontrado na fun√ß√£o Edge, provavelmente j√° foi exclu√≠do');
              return true;
            }
            
            throw app_exceptions.AuthException(
              'Erro ao excluir conta: ${response.data['error']} - ${response.data['details'] ?? ''}'
            );
          }
          throw app_exceptions.AuthException('Erro ao excluir conta. C√≥digo: ${response.status}');
        }
        
        print('‚úÖ [SettingsRepository] Usu√°rio exclu√≠do com sucesso!');
        
        // Imprimir detalhes da resposta para depura√ß√£o
        bool responseHasSuccess = false;
        
        if (response.data != null) {
          print('üìù [SettingsRepository] Resposta da Edge Function:');
          
          if (response.data['message'] != null) {
            print('üìÑ [SettingsRepository] Mensagem: ${response.data['message']}');
          }
          
          if (response.data['notes'] != null) {
            print('üìã [SettingsRepository] Detalhes: ${response.data['notes']}');
          }
          
          if (response.data['method'] != null) {
            print('üîß [SettingsRepository] M√©todo de exclus√£o: ${response.data['method']}');
          }
          
          // Verificar se a resposta indica sucesso explicitamente
          if (response.data['success'] == true) {
            responseHasSuccess = true;
            print('üîë [SettingsRepository] Resposta cont√©m flag de sucesso = true');
          }
          
          // Imprimir outros dados dispon√≠veis na resposta
          final otherKeys = response.data.keys.where((key) => 
            key != 'message' && key != 'notes' && key != 'method' && key != 'error' && key != 'details');
          
          for (final key in otherKeys) {
            print('üîπ [SettingsRepository] $key: ${response.data[key]}');
          }
        } else {
          print('‚ö†Ô∏è [SettingsRepository] Resposta vazia da Edge Function');
        }
        
        // Delay para garantir que a resposta tenha tempo de ser processada
        await Future.delayed(const Duration(milliseconds: 500));
        
        // N√£o fazemos logout via Supabase, pois o token j√° n√£o √© mais v√°lido
        // Em vez disso, retornamos true para indicar sucesso, e o chamador
        // deve despachar o evento AccountDeletedLogout no AuthBloc
        return true;
        
      } catch (edgeFunctionError) {
        print('‚ö†Ô∏è [SettingsRepository] Erro na Edge Function: $edgeFunctionError');
        print('üìù [SettingsRepository] Tipo de erro: ${edgeFunctionError.runtimeType}');
        
        // Detalhes adicionais para depura√ß√£o
        if (edgeFunctionError is Exception) {
          print('üîç [SettingsRepository] Detalhes da exce√ß√£o: ${edgeFunctionError.toString()}');
        }
        
        throw app_exceptions.AuthException('Falha ao excluir conta via Edge Function: $edgeFunctionError');
      }
    } catch (e) {
      print('‚ö†Ô∏è [SettingsRepository] Erro ao excluir conta: $e');
      print('üìù [SettingsRepository] Tipo de erro: ${e.runtimeType}');
      
      // Verifica se o erro √© "user_not_found", o que significa que o usu√°rio j√° foi exclu√≠do
      // Neste caso, consideramos como sucesso e retornamos true
      if (e is AuthException && e.message.toLowerCase().contains('user_not_found')) {
        print('‚ÑπÔ∏è [SettingsRepository] Usu√°rio n√£o encontrado, provavelmente j√° foi exclu√≠do');
        return true;
      }
      
      // Verifica outros erros relacionados ao usu√°rio n√£o encontrado
      final errorString = e.toString().toLowerCase();
      if (errorString.contains('user_not_found') || 
          errorString.contains('user not found') ||
          errorString.contains('not found') && errorString.contains('user')) {
        print('‚ÑπÔ∏è [SettingsRepository] Usu√°rio n√£o encontrado, provavelmente j√° foi exclu√≠do');
        return true;
      }
      
      // Verificar outros erros comuns
      if (errorString.contains('timeout') || errorString.contains('timed out')) {
        print('‚è±Ô∏è [SettingsRepository] Timeout na opera√ß√£o, mas a conta pode ter sido exclu√≠da');
        // Ainda retornamos true para evitar que o usu√°rio fique preso
        return true;
      }
      
      if (e is AuthException) {
        throw e;
      }
      
      throw app_exceptions.AuthException('Falha ao excluir conta: $e');
    }
  }

}