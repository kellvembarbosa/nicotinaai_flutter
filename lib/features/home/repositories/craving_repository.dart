import 'package:flutter/foundation.dart';
import 'package:nicotinaai_flutter/config/supabase_config.dart';
import 'package:nicotinaai_flutter/features/home/models/craving_model.dart';

class CravingRepository {
  static const String _tableName = 'cravings';
  
  // Removido m√©todo logTableInfo que causava mensagens de log em loop

  Future<CravingModel> saveCraving(CravingModel craving) async {
    try {
      // Log para debug
      debugPrint('üîÑ Repository: Iniciando salvamento de craving');
      
      // Verificar se o usu√°rio est√° autenticado
      final currentUser = SupabaseConfig.auth.currentUser;
      debugPrint('üë§ Auth Check: User ID atual: ${currentUser?.id}');
      debugPrint('üë§ Auth Check: User ID do objeto craving: ${craving.userId}');
      
      if (currentUser == null) {
        throw Exception('Usu√°rio n√£o autenticado. Imposs√≠vel salvar o craving.');
      }
      
      // Verificar se o token de autentica√ß√£o √© v√°lido
      final session = SupabaseConfig.auth.currentSession;
      if (session == null) {
        throw Exception('Sess√£o n√£o encontrada. Token de autentica√ß√£o inv√°lido.');
      }
      
      debugPrint('üîê Token de acesso v√°lido: ${session.accessToken.substring(0, 10)}...');
      
      // Preparar dados para envio, removendo campos tempor√°rios
      final jsonData = craving.toJson();
      
      // Log detalhado dos dados que estamos enviando (apenas em desenvolvimento)
      if (kDebugMode) {
        debugPrint('üìã DADOS ORIGINAIS DO CRAVING:');
        debugPrint('- ID: ${craving.id ?? "null (novo registro)"}');
        debugPrint('- Location: ${craving.location}');
        debugPrint('- Trigger: ${craving.trigger}');
        debugPrint('- Intensity: ${craving.intensity}');
        debugPrint('- Resisted: ${craving.resisted}');
        debugPrint('- Notes: ${craving.notes}');
        debugPrint('- UserID: ${craving.userId}');
        debugPrint('- Timestamp: ${craving.timestamp}');
        
        debugPrint('üì¶ DADOS JSON A SEREM ENVIADOS:');
        jsonData.forEach((key, value) => debugPrint('- $key: $value'));
        
        // Verificar todos os campos obrigat√≥rios da tabela
        final requiredFields = ['location', 'trigger', 'intensity', 'outcome', 'user_id', 'timestamp'];
        final missingFields = requiredFields.where((field) => !jsonData.containsKey(field) || jsonData[field] == null).toList();
        
        if (missingFields.isNotEmpty) {
          debugPrint('‚ùå ERRO: Campos obrigat√≥rios faltando: ${missingFields.join(', ')}');
        }
        
        // Verifica√ß√£o espec√≠fica para o campo intensity
        final intensity = jsonData['intensity'];
        debugPrint('üîç Verificando campo intensity: $intensity');
        if (intensity != 'LOW' && intensity != 'MODERATE' && intensity != 'HIGH' && intensity != 'VERY_HIGH') {
          debugPrint('‚ö†Ô∏è AVISO: O valor do intensity n√£o corresponde aos valores esperados do enum no banco de dados!');
          debugPrint('Valores esperados: ["LOW", "MODERATE", "HIGH", "VERY_HIGH"]');
        }
        
        // Verifica√ß√£o espec√≠fica para o campo outcome
        final outcome = jsonData['outcome'];
        debugPrint('üîç Verificando campo outcome: $outcome');
        if (outcome != 'RESISTED' && outcome != 'SMOKED' && outcome != 'ALTERNATIVE') {
          debugPrint('‚ö†Ô∏è AVISO: O valor do outcome n√£o corresponde aos valores esperados do enum no banco de dados!');
          debugPrint('Valores esperados: ["RESISTED", "SMOKED", "ALTERNATIVE"]');
        }
        
        // Verifica√ß√£o de permiss√µes RLS
        debugPrint('üîí Verificando RLS: user_id no request (${jsonData['user_id']}) deve corresponder ao auth.uid() (${currentUser.id})');
        if (jsonData['user_id'] != currentUser.id) {
          debugPrint('‚ö†Ô∏è AVISO DE RLS: user_id no request n√£o corresponde ao auth.uid(), o que violar√° as pol√≠ticas RLS!');
          debugPrint('üîß Corre√ß√£o: Ajustando user_id para corresponder ao usu√°rio autenticado');
          jsonData['user_id'] = currentUser.id;
        }
      }
      
      // Force user_id to match the current user to avoid RLS issues
      jsonData['user_id'] = currentUser.id;
      
      // Remover ID se for tempor√°rio ou nulo
      if (craving.id == null || craving.id!.startsWith('temp_')) {
        jsonData.remove('id');
      }
      
      // Mostrar comando SQL equivalente para debug
      debugPrint('üîç SIMULA√á√ÉO SQL:');
      if (craving.id != null && !craving.id!.startsWith('temp_')) {
        debugPrint("UPDATE public.cravings SET ");
        jsonData.forEach((key, value) {
          if (key != 'id') {
            debugPrint('  $key = ${value is String ? "'$value'" : value},');
          }
        });
        debugPrint("WHERE id = '${craving.id}' AND auth.uid() = '${currentUser.id}';");
      } else {
        debugPrint("INSERT INTO public.cravings (${jsonData.keys.join(', ')})");
        debugPrint("VALUES (${jsonData.values.map((v) => v is String ? "'$v'" : v).join(', ')});");
      }
      
      // Se estamos atualizando um registro existente (ID n√£o tempor√°rio)
      if (craving.id != null && !craving.id!.startsWith('temp_')) {
        debugPrint('Repository: Updating existing craving with ID ${craving.id}');
        try {
          final response = await SupabaseConfig.client
              .from(_tableName)
              .update(jsonData)
              .eq('id', craving.id!)
              .select()
              .single();
          
          debugPrint('‚úÖ SUCESSO no update! Resposta recebida: ${response.toString().substring(0, 100)}...');
          return CravingModel.fromJson(response);
        } catch (updateError) {
          debugPrint('‚ùå ERRO NO UPDATE: $updateError');
          throw updateError;
        }
      } 
      // Caso contr√°rio, estamos criando um novo registro
      else {
        debugPrint('Repository: Creating new craving');
        try {
          final response = await SupabaseConfig.client
              .from(_tableName)
              .insert(jsonData)
              .select()
              .single();
          
          debugPrint('‚úÖ SUCESSO no insert! Resposta recebida: ${response.toString().substring(0, 100)}...');
          return CravingModel.fromJson(response);
        } catch (insertError) {
          debugPrint('‚ùå ERRO NO INSERT: $insertError');
          throw insertError;
        }
      }
    } catch (e) {
      debugPrint('‚ùå ERRO AO SALVAR CRAVING: $e');
      debugPrint('------------------------------------');
      debugPrint('DETALHES DO ERRO:');
      
      final errorMsg = e.toString();
      debugPrint(errorMsg);
      
      // Debug avan√ßado da sess√£o do usu√°rio
      try {
        final currentUser = SupabaseConfig.auth.currentUser;
        final session = SupabaseConfig.auth.currentSession;
        
        debugPrint('=== DADOS DE AUTENTICA√á√ÉO ===');
        debugPrint('User autenticado: ${currentUser != null ? "SIM" : "N√ÉO"}');
        if (currentUser != null) {
          debugPrint('- User ID: ${currentUser.id}');
          debugPrint('- User Email: ${currentUser.email}');
          debugPrint('- Created At: ${currentUser.createdAt}');
          debugPrint('- Last Sign In: ${currentUser.lastSignInAt}');
        }
        
        debugPrint('Sess√£o v√°lida: ${session != null ? "SIM" : "N√ÉO"}');
        if (session != null) {
          debugPrint('- Token expira em: ${session.expiresAt != null ? DateTime.fromMillisecondsSinceEpoch(session.expiresAt! * 1000) : "N/A"}');
          debugPrint('- Token expirado: ${session.isExpired ? "SIM" : "N√ÉO"}');
        }
        debugPrint('=============================');
      } catch (authDebugError) {
        debugPrint('‚ö†Ô∏è Erro ao obter dados de autentica√ß√£o para debug: $authDebugError');
      }
      
      // Tentar executar uma query simples para testar a conex√£o e autentica√ß√£o
      try {
        debugPrint('üîç TESTE DE CONEX√ÉO: Executando query simples para verificar autentica√ß√£o...');
        
        // Disparar query ass√≠ncrona para debug - apenas para registro nos logs
        SupabaseConfig.client
            .from('profiles')
            .select('id')
            .limit(1)
            .then((result) {
              debugPrint('‚úÖ Query de teste bem-sucedida: $result');
            })
            .catchError((testError) {
              debugPrint('‚ùå Query de teste falhou: $testError');
              debugPrint('üîë Prov√°vel problema de autentica√ß√£o ou conex√£o com o Supabase');
            });
      } catch (testError) {
        debugPrint('‚ùå Erro ao executar query de teste: $testError');
      }
      
      // Analisar erros comuns
      if (errorMsg.contains('outcome')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Erro com o campo "outcome"');
        debugPrint('- O campo "outcome" deve ser um dos valores: "RESISTED", "SMOKED", "ALTERNATIVE"');
        debugPrint('- Verificar o m√©todo toJson() no CravingModel');
      } 
      else if (errorMsg.contains('column')) {
        // Pode ser problema de colunas faltando ou incompat√≠veis
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Erro de coluna no banco de dados');
        debugPrint('- Verifique se todas as colunas obrigat√≥rias est√£o presentes no JSON');
        debugPrint('- Verifique se os nomes das colunas est√£o corretos (ex: user_id vs userId)');
        debugPrint('- A coluna "outcome" (n√£o "resisted") √© usada no banco de dados');
      }
      else if (errorMsg.contains('not null')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Viola√ß√£o de restri√ß√£o NOT NULL');
        debugPrint('- Campo obrigat√≥rio est√° faltando ou √© nulo');
        debugPrint('- Verifique todos os campos marcados como NOT NULL na migra√ß√£o do banco');
        debugPrint('- Campos obrigat√≥rios: location, trigger, intensity, outcome, user_id, timestamp');
      }
      else if (errorMsg.contains('violates foreign key')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Viola√ß√£o de chave estrangeira');
        debugPrint('- Verifique se o user_id √© v√°lido e existe na tabela auth.users');
      }
      else if (errorMsg.contains('policy')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Viola√ß√£o de pol√≠tica RLS');
        debugPrint('- Verifique se o usu√°rio est√° autenticado');
        debugPrint('- Verifique se o user_id no craving corresponde ao auth.uid()');
      }
      else if (errorMsg.contains('invalid input value for enum')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Valor inv√°lido para um campo enum');
        debugPrint('- intensity deve ser: "LOW", "MODERATE", "HIGH", "VERY_HIGH"');
        debugPrint('- outcome deve ser: "RESISTED", "SMOKED", "ALTERNATIVE"');
      }
      else if (errorMsg.contains('JWT')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Erro de autentica√ß√£o JWT');
        debugPrint('- O token de autentica√ß√£o pode estar expirado ou ser inv√°lido');
        debugPrint('- Tente fazer logout e login novamente');
      }
      else if (errorMsg.contains('timeout') || errorMsg.contains('network')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Erro de rede ou timeout');
        debugPrint('- Verifique a conex√£o de internet do dispositivo');
        debugPrint('- A API do Supabase pode estar temporariamente indispon√≠vel');
      }
      else if (errorMsg.contains('rate limit')) {
        debugPrint('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Rate limit excedido');
        debugPrint('- Muitas requisi√ß√µes em um curto per√≠odo de tempo');
        debugPrint('- Tente novamente em alguns segundos');
      }
      
      debugPrint('------------------------------------');
      
      // Propagar erro para o provider
      rethrow;
    }
  }
  
  Future<void> deleteCraving(String id) async {
    // Don't try to delete temporary IDs from the server
    if (id.startsWith('temp_')) return;
    
    await SupabaseConfig.client
        .from(_tableName)
        .delete()
        .eq('id', id);
  }
  
  Future<List<CravingModel>> getCravingsForUser(String userId) async {
    final data = await SupabaseConfig.client
        .from(_tableName)
        .select()
        .eq('user_id', userId)
        .order('timestamp', ascending: false);
    
    return (data as List<dynamic>).map((item) => CravingModel.fromJson(item)).toList();
  }
  
  Future<int> getCravingCountForUser(String userId) async {
    final data = await SupabaseConfig.client
        .from(_tableName)
        .select('id')
        .eq('user_id', userId);
    
    return (data as List<dynamic>).length;
  }
}