import 'package:flutter/foundation.dart';
import 'package:nicotinaai_flutter/config/supabase_config.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Classe utilit√°ria para diagnosticar problemas de conex√£o com o Supabase
/// √ötil para identificar problemas como erro 404 ao acessar tabelas
class SupabaseDiagnostic {
  
  /// Executa o diagn√≥stico completo e retorna um relat√≥rio detalhado
  static Future<String> diagnoseConnection({String? tableName}) async {
    final table = tableName ?? 'smoking_logs';
    final StringBuffer report = StringBuffer();
    
    report.writeln('üîç RELAT√ìRIO DE DIAGN√ìSTICO SUPABASE');
    report.writeln('üìÖ Data/hora: ${DateTime.now()}');
    report.writeln('-------------------------------------------');
    
    // Verifica inicializa√ß√£o do cliente
    report.writeln('\n1Ô∏è‚É£ CLIENTE SUPABASE');
    try {
      // Verifica se o cliente est√° inicializado
      final client = SupabaseConfig.client;
      report.writeln('‚úÖ Cliente inicializado');
      
      // Tenta acessar a URL da API (sem mostrar a chave)
      report.writeln('üåê Rest URL: ${client.rest.url}');
      report.writeln('üî¢ API Version: ${client.rest.url.contains('/rest/v1') ? 'v1' : 'unknown'}');
    } catch (e) {
      report.writeln('‚ùå Falha na inicializa√ß√£o do cliente: $e');
    }
    
    // Verifica status de autentica√ß√£o
    report.writeln('\n2Ô∏è‚É£ STATUS DE AUTENTICA√á√ÉO');
    try {
      final auth = SupabaseConfig.auth;
      final session = auth.currentSession;
      
      if (session != null) {
        report.writeln('‚úÖ Usu√°rio autenticado');
        report.writeln('üë§ User ID: ${session.user.id}');
        report.writeln('‚è±Ô∏è Expira em: ${session.expiresAt != null ? 
          DateTime.fromMillisecondsSinceEpoch(session.expiresAt! * 1000) : 'N/A'}');
        report.writeln('üîÑ Token atual v√°lido: ${!auth.currentSession!.isExpired}');
      } else {
        report.writeln('‚ùå Usu√°rio N√ÉO autenticado - isso pode causar erros 404 devido √† RLS');
      }
    } catch (e) {
      report.writeln('‚ùå Erro ao verificar autentica√ß√£o: $e');
    }
    
    // Verifica acesso √† tabela espec√≠fica
    report.writeln('\n3Ô∏è‚É£ VERIFICA√á√ÉO DA TABELA: $table');
    
    // Tenta listar tabelas para ver se a tabela existe
    try {
      report.writeln('üîç Tentando listar tabelas dispon√≠veis...');
      
      // Tenta usar RPC para listar tabelas (se dispon√≠vel)
      try {
        final response = await SupabaseConfig.client.rpc(
          'get_tables',
        ).select('name');
        
        final tables = (response as List<dynamic>)
            .map((item) => item['name'] as String)
            .toList();
            
        report.writeln('üìã Tabelas encontradas (${tables.length}): ${tables.join(', ')}');
        
        if (tables.contains(table)) {
          report.writeln('‚úÖ Tabela $table encontrada na lista');
        } else {
          report.writeln('‚ùå Tabela $table N√ÉO encontrada na lista - isso explicaria o erro 404');
        }
      } catch (e) {
        report.writeln('‚ö†Ô∏è N√£o foi poss√≠vel listar tabelas com RPC: $e');
        report.writeln('‚ö†Ô∏è Isso √© normal se a fun√ß√£o RPC "get_tables" n√£o estiver definida');
      }
      
      // Tenta acessar diretamente a tabela
      try {
        report.writeln('\nüîç Tentando acessar diretamente a tabela $table...');
        final response = await SupabaseConfig.client
            .from(table)
            .select('count(*)')
            .limit(1)
            .maybeSingle();
        
        report.writeln('‚úÖ Conseguiu acessar a tabela $table: $response');
      } catch (e) {
        report.writeln('‚ùå Erro ao acessar tabela $table: $e');
        
        if (e.toString().contains('404')) {
          report.writeln('\n‚ùó POSS√çVEIS CAUSAS DO ERRO 404:');
          report.writeln('1. A tabela "$table" n√£o existe no banco de dados');
          report.writeln('2. O URL do Supabase no .env est√° incorreto');
          report.writeln('3. As migra√ß√µes n√£o foram aplicadas corretamente');
          report.writeln('4. Pol√≠ticas RLS est√£o bloqueando o acesso (voc√™ est√° autenticado?)');
          report.writeln('5. O nome da tabela tem um erro de digita√ß√£o ou mai√∫sculas/min√∫sculas');
        }
      }
    } catch (e) {
      report.writeln('‚ùå Erro geral ao verificar tabela: $e');
    }
    
    // Verifica status da rede
    report.writeln('\n4Ô∏è‚É£ VERIFICA√á√ÉO DE REDE');
    try {
      // Tenta uma opera√ß√£o simples para verificar conex√£o
      final response = await SupabaseConfig.client.functions.invoke('ping');
      if (response.status == 200) {
        report.writeln('‚úÖ Conex√£o com Supabase Functions funcionando');
      } else {
        report.writeln('‚ö†Ô∏è C√≥digo de status inesperado: ${response.status}');
      }
    } catch (e) {
      report.writeln('‚ö†Ô∏è N√£o conseguiu conectar √†s Functions, isso √© normal se n√£o houver uma function "ping": $e');
    }
    
    report.writeln('\n-------------------------------------------');
    report.writeln('üèÅ FIM DO RELAT√ìRIO DE DIAGN√ìSTICO');
    
    return report.toString();
  }
  
  /// Realiza o diagn√≥stico e mostra o relat√≥rio no console 
  static Future<void> logDiagnosticReport({String? tableName}) async {
    try {
      final report = await diagnoseConnection(tableName: tableName);
      
      // Divide o relat√≥rio em linhas para facilitar a leitura no console
      final lines = report.split('\n');
      for (final line in lines) {
        if (kDebugMode) {
          print(line);
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao executar diagn√≥stico: $e');
      }
    }
  }
  
  /// Verifica especificamente se a tabela existe e √© acess√≠vel
  static Future<bool> isTableAccessible(String tableName) async {
    try {
      // Usando select('*') em vez de count(*) para evitar erros de sintaxe
      await SupabaseConfig.client
          .from(tableName)
          .select('*')
          .limit(1);
      return true;
    } catch (e) {
      print('‚ùå Erro ao verificar acesso √† tabela $tableName: $e');
      return false;
    }
  }
}